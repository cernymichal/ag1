#include <cassert>
#include <iostream>

#include "bestsellers.cpp"

#define CATCH(expr)                    \
    try {                              \
        expr;                          \
        assert(0);                     \
    }                                  \
    catch (const std::out_of_range&) { \
        assert(1);                     \
    };

void test1() {
    Bestsellers<std::string> T;
    T.sell("coke", 32);
    T.sell("bread", 1);
    assert(T.products() == 2);
    T.sell("ham", 2);
    T.sell("mushrooms", 12);

    assert(T.products() == 4);
    assert(T.rank("ham") == 3);
    assert(T.rank("coke") == 1);
    assert(T.sold(1, 3) == 46);
    assert(T.product(2) == "mushrooms");

    T.sell("ham", 11);
    assert(T.products() == 4);
    assert(T.product(2) == "ham");
    assert(T.sold(2) == 13);
    assert(T.sold(2, 2) == 13);
    assert(T.sold(1, 2) == 45);
}

void test2() {
    Bestsellers<std::string> T;
    T.sell("coke", 32);
    T.sell("bread", 1);

    CATCH(T.rank("ham"));
    CATCH(T.product(3));
    CATCH(T.sold(0));
    CATCH(T.sold(9));
    CATCH(T.sold(0, 1));
    CATCH(T.sold(3, 2));
    CATCH(T.sold(1, 9));
}

void testRandom() {
    Bestsellers<std::string> T;
    assert(T.products() == 0);
    assert(T.products() == 0);
    T.sell("o<_C[v85Jn", 17177629309170245730UL);
    assert(T.product(1) == "o<_C[v85Jn");
    assert(T.product(1) == "o<_C[v85Jn");
    assert(T.products() == 1);
    assert(T.sold(1, 1) == 17177629309170245730UL);
    assert(T.sold(1) == 17177629309170245730UL);
    assert(T.rank("o<_C[v85Jn") == 1);
    assert(T.products() == 1);
    assert(T.rank("o<_C[v85Jn") == 1);
    assert(T.sold(1) == 17177629309170245730UL);
    assert(T.sold(1) == 17177629309170245730UL);
    assert(T.products() == 1);
    assert(T.sold(1, 1) == 17177629309170245730UL);
    assert(T.products() == 1);
    assert(T.product(1) == "o<_C[v85Jn");
    assert(T.rank("o<_C[v85Jn") == 1);
    assert(T.products() == 1);
    T.sell("N1`g4U^2a|", 8187972861452616578UL);
    assert(T.rank("N1`g4U^2a|") == 2);
    T.sell("_zS:mdLhuP", 14002437538030858504UL);
    assert(T.products() == 3);
    T.sell("[8R]t;;pkW", 555576224910755405UL);
    assert(T.sold(4, 4) == 555576224910755405UL);
    assert(T.rank("o<_C[v85Jn") == 1);
    assert(T.products() == 4);
    T.sell("J|@7<tR`bc", 7923184946828538462UL);
    assert(T.sold(1) == 17177629309170245730UL);
    assert(T.sold(2, 2) == 14002437538030858504UL);
    assert(T.sold(1, 1) == 17177629309170245730UL);
    assert(T.product(5) == "[8R]t;;pkW");
    assert(T.sold(4) == 7923184946828538462UL);
    assert(T.product(3) == "N1`g4U^2a|");
    assert(T.products() == 5);
    assert(T.products() == 5);
    assert(T.sold(4) == 7923184946828538462UL);
    assert(T.product(3) == "N1`g4U^2a|");
    assert(T.rank("J|@7<tR`bc") == 4);
    T.sell("gzj=[oA`R@", 6357559483335136287UL);
    T.sell("jdg6|Moo}f", 5297736914328143137UL);
    assert(T.products() == 7);
    assert(T.sold(3) == 8187972861452616578UL);
    T.sell("[Q:d0LzJxS", 9593755118861789161UL);
    assert(T.sold(7) == 5297736914328143137UL);
    assert(T.sold(7, 8) == 5853313139238898542UL);
    assert(T.sold(6, 8) == 12210872622574034829UL);
    T.sell("me{Qpg]^qL", 17072053223908633631UL);
    assert(T.sold(5) == 8187972861452616578UL);
    assert(T.products() == 9);
    assert(T.sold(2, 9) == 13650044090527816317UL);
    assert(T.sold(6) == 7923184946828538462UL);
    assert(T.product(1) == "o<_C[v85Jn");
    assert(T.products() == 9);
    T.sell("hfUqpl=75P", 14228406800135921296UL);
    assert(T.rank("jdg6|Moo}f") == 9);
    assert(T.rank("me{Qpg]^qL") == 2);
    assert(T.product(4) == "_zS:mdLhuP");
    assert(T.product(4) == "_zS:mdLhuP");
    assert(T.product(5) == "[Q:d0LzJxS");
    assert(T.sold(4) == 14002437538030858504UL);
    assert(T.sold(9) == 5297736914328143137UL);
    assert(T.sold(4) == 14002437538030858504UL);
    assert(T.rank("me{Qpg]^qL") == 2);
    assert(T.sold(5, 8) == 13615728336768528872UL);
    assert(T.sold(7) == 7923184946828538462UL);
    assert(T.products() == 10);
    assert(T.product(1) == "o<_C[v85Jn");
    assert(T.sold(6, 6) == 8187972861452616578UL);
    assert(T.sold(4, 5) == 5149448583183096049UL);
    assert(T.product(7) == "J|@7<tR`bc");
    assert(T.sold(6, 8) == 4021973217906739711UL);
    assert(T.rank("gzj=[oA`R@") == 8);
    T.sell("b~:zD3e:T[", 6342659865831373493UL);
    assert(T.sold(6, 10) == 15662369998066256341UL);
    assert(T.rank("hfUqpl=75P") == 3);
    assert(T.sold(6) == 8187972861452616578UL);
    assert(T.rank("[Q:d0LzJxS") == 5);
    T.sell("r=pS`g@NWc", 6025302688735022420UL);
    assert(T.sold(3) == 14228406800135921296UL);
    assert(T.product(3) == "hfUqpl=75P");
    assert(T.sold(3, 10) == 17321047082082601353UL);
    assert(T.sold(3, 3) == 14228406800135921296UL);
    assert(T.product(4) == "_zS:mdLhuP");
    assert(T.sold(1, 10) == 14677241467742377482UL);
    assert(T.product(11) == "jdg6|Moo}f");
    assert(T.sold(7) == 7923184946828538462UL);
    assert(T.sold(6, 10) == 16389935772473135624UL);
    assert(T.rank("[8R]t;;pkW") == 12);
    assert(T.product(4) == "_zS:mdLhuP");
    T.sell("g[Dh;R9G8S", 3478996989514072887UL);
    assert(T.rank("[8R]t;;pkW") == 13);
    assert(T.product(6) == "N1`g4U^2a|");
    assert(T.sold(3, 12) == 7651036912215265761UL);
    T.sell("bdx?7NUz2V", 722072436495892001UL);
    assert(T.sold(1, 7) == 14398463503550396898UL);
    T.sell("J[3YoBg0FZ", 9203343615771151508UL);
    assert(T.rank("hfUqpl=75P") == 3);
    assert(T.sold(13) == 3478996989514072887UL);
    assert(T.sold(10, 11) == 12367962554566395913UL);
    assert(T.rank("jdg6|Moo}f") == 12);
    T.sell("t~N]QSvHy]", 11999033969102932093UL);
    assert(T.product(1) == "o<_C[v85Jn");
    assert(T.sold(14) == 3478996989514072887UL);
    assert(T.products() == 16);
    assert(T.rank("[Q:d0LzJxS") == 6);
    assert(T.sold(10) == 6357559483335136287UL);
    assert(T.products() == 16);
    assert(T.products() == 16);
    assert(T.product(4) == "_zS:mdLhuP");
    assert(T.product(8) == "N1`g4U^2a|");
    assert(T.sold(8, 10) == 4021973217906739711UL);
    T.sell("}1N?UX8u{v", 11689688931152991213UL);
    assert(T.sold(10, 11) == 14280744430163674749UL);
    assert(T.sold(8, 14) == 12444272228862878653UL);
    T.sell("oF~|V:@7Vw", 14635339160291173271UL);
    assert(T.products() == 18);
    T.sell("sh`<Hs7b1n", 8331970214356334611UL);
    assert(T.sold(11, 13) == 4021973217906739711UL);
    T.sell("2p{U~]y1vv", 11222151486746154052UL);
    T.sell("=EGQsl5m`?", 18408644643016805299UL);
    assert(T.sold(16) == 6342659865831373493UL);
    T.sell("[HPJB>]i}a", 12455832499685820368UL);
    assert(T.sold(22) == 555576224910755405UL);
    assert(T.product(17) == "b~:zD3e:T[");
    assert(T.sold(14) == 8187972861452616578UL);
    assert(T.products() == 22);
    assert(T.products() == 22);
    assert(T.product(7) == "[HPJB>]i}a");
    assert(T.sold(4, 10) == 16445914090307644333UL);
    assert(T.product(10) == "2p{U~]y1vv");
    assert(T.sold(14) == 8187972861452616578UL);
    assert(T.products() == 22);
    assert(T.sold(12, 16) == 3110542974324674214UL);
    T.sell("wdL_o;GQpb", 14718677106952728178UL);
    T.sell("9FlsP=hivr", 1602638326559707601UL);
    assert(T.rank("gzj=[oA`R@") == 17);
    assert(T.rank("J|@7<tR`bc") == 16);
    assert(T.sold(13) == 9203343615771151508UL);
    assert(T.products() == 24);
    assert(T.sold(23, 24) == 1277648661406647406UL);
    T.sell("_K=G^usPGa", 17946118188590591620UL);
    assert(T.sold(4, 23) == 9901301004485582591UL);
    assert(T.product(5) == "wdL_o;GQpb");
    assert(T.products() == 25);
    assert(T.products() == 25);
    assert(T.sold(25) == 555576224910755405UL);
    assert(T.rank("t~N]QSvHy]") == 10);
    T.sell("_oqFq0mon4", 4553354990539117076UL);
    assert(T.sold(11) == 11689688931152991213UL);
    assert(T.sold(24) == 1602638326559707601UL);
    assert(T.sold(13, 26) == 4389148382681444163UL);
    assert(T.sold(19) == 6342659865831373493UL);
    assert(T.sold(26) == 555576224910755405UL);
    assert(T.sold(11) == 11689688931152991213UL);
    assert(T.products() == 26);
    T.sell("|ToLFW0gwd", 14167523075185770989UL);
    assert(T.product(3) == "o<_C[v85Jn");
    assert(T.product(5) == "wdL_o;GQpb");
    assert(T.sold(22) == 5297736914328143137UL);
    assert(T.product(23) == "_oqFq0mon4");
    assert(T.rank("gzj=[oA`R@") == 19);
    assert(T.rank("2p{U~]y1vv") == 13);
    assert(T.sold(3, 9) == 13768345845127573519UL);
    assert(T.sold(12, 13) == 4465096344189593649UL);
    assert(T.product(4) == "me{Qpg]^qL");
    assert(T.product(18) == "J|@7<tR`bc");
    assert(T.product(13) == "2p{U~]y1vv");
    assert(T.product(15) == "J[3YoBg0FZ");
    assert(T.product(15) == "J[3YoBg0FZ");
    assert(T.sold(6, 27) == 16555841474465307869UL);
    assert(T.sold(26) == 722072436495892001UL);
    assert(T.sold(25) == 1602638326559707601UL);
    assert(T.sold(3) == 17177629309170245730UL);
    assert(T.rank("g[Dh;R9G8S") == 24);
    assert(T.sold(5, 18) == 14785364734878367356UL);
    assert(T.products() == 27);
    assert(T.product(6) == "oF~|V:@7Vw");
    assert(T.products() == 27);
    T.sell("@KBp5;GVj}", 592143848831295860UL);
    assert(T.sold(16, 27) == 4075361345678595565UL);
    assert(T.sold(25) == 1602638326559707601UL);
    assert(T.sold(9) == 14002437538030858504UL);
    T.sell(";bEgiV`?fK", 598029983943429487UL);
    assert(T.rank("o<_C[v85Jn") == 3);
    T.sell("x7_W9I]<Bl", 12416445855886659590UL);
    assert(T.sold(27) == 722072436495892001UL);
    assert(T.sold(18) == 8187972861452616578UL);
    assert(T.sold(11, 28) == 14865434237183751961UL);
    assert(T.products() == 30);
    assert(T.sold(3, 8) == 18212652380806266631UL);
    assert(T.sold(16) == 9203343615771151508UL);
    assert(T.sold(12) == 11999033969102932093UL);
    T.sell("cliFPCrv44", 11236596770639729332UL);
    T.sell("y:kEF=b]eB", 15674663423599447669UL);
    assert(T.product(24) == "r=pS`g@NWc");
    assert(T.product(26) == "_oqFq0mon4");
    T.sell("Q>@1iAY]z6", 5429835084186368781UL);
    assert(T.product(18) == "J[3YoBg0FZ");
    T.sell("LfDS:B33>Z", 866148853764147446UL);
    assert(T.rank("gzj=[oA`R@") == 22);
    assert(T.product(10) == "_zS:mdLhuP");
    assert(T.rank(";bEgiV`?fK") == 32);
    T.sell("R54pMj|sby", 12170196177921075123UL);
    assert(T.rank("r=pS`g@NWc") == 25);
    assert(T.sold(15) == 11689688931152991213UL);
    assert(T.products() == 35);
    assert(T.sold(8, 19) == 15258203323153991917UL);
    T.sell("~7BOinxY8R", 3964426531084517222UL);
    assert(T.sold(16) == 11236596770639729332UL);
    assert(T.sold(22) == 7923184946828538462UL);
    T.sell("i|waJhVgKw", 5841499750651910825UL);
    assert(T.products() == 37);
    assert(T.rank("r=pS`g@NWc") == 25);
    assert(T.rank("wdL_o;GQpb") == 6);
    assert(T.sold(15, 22) == 3601687650971098453UL);
    assert(T.sold(37) == 555576224910755405UL);
    assert(T.sold(32) == 1602638326559707601UL);
    assert(T.products() == 37);
    assert(T.rank("_oqFq0mon4") == 29);
    assert(T.sold(35) == 598029983943429487UL);
    assert(T.rank("2p{U~]y1vv") == 17);
    T.sell("}wAmx3iuxa", 9425247087499399729UL);
    assert(T.sold(9, 15) == 15114181752127901416UL);
    T.sell(";;~10yW:D9", 16192941122147630976UL);
    assert(T.sold(37) == 598029983943429487UL);
    assert(T.products() == 39);
    assert(T.products() == 39);
    assert(T.product(24) == "J|@7<tR`bc");
    assert(T.rank("@KBp5;GVj}") == 38);
    T.sell(";7IK}Bn?8S", 16760464228710471532UL);
    assert(T.sold(39) == 592143848831295860UL);
    assert(T.product(9) == "oF~|V:@7Vw");
    assert(T.rank("J|@7<tR`bc") == 25);
    assert(T.rank("_K=G^usPGa") == 2);
    assert(T.products() == 40);
    assert(T.rank("g[Dh;R9G8S") == 34);
    assert(T.rank("g[Dh;R9G8S") == 34);
    T.sell("|tHw8m]n}]", 13106246098484318407UL);
    assert(T.sold(12) == 14002437538030858504UL);
    assert(T.product(5) == ";7IK}Bn?8S");
    assert(T.products() == 41);
    assert(T.rank("J[3YoBg0FZ") == 23);
    assert(T.sold(18) == 11689688931152991213UL);
    assert(T.product(35) == "g[Dh;R9G8S");
    assert(T.sold(12) == 14002437538030858504UL);
    T.sell("M5xzqKupa?", 5694817409420199080UL);
    assert(T.sold(24, 36) == 3642341435425144395UL);
    assert(T.sold(12, 20) == 18064908959102780602UL);
    assert(T.products() == 42);
    T.sell("lYmE^HyY1`", 15497204349346931570UL);
    assert(T.sold(15, 32) == 96562070492869381UL);
    assert(T.products() == 43);
    assert(T.rank("i|waJhVgKw") == 31);
    T.sell("J5;cH2vAyK", 6608339085642822703UL);
    assert(T.product(41) == "bdx?7NUz2V");
    T.sell("P5wjvikM@M", 1531600883509701405UL);
    T.sell("@c[i@4qa5=", 15642554824557391715UL);
    T.sell("`Rcmgc5iiu", 13293718725157119707UL);
    assert(T.products() == 47);
    assert(T.sold(24, 36) == 2731766844024905558UL);
    assert(T.rank("[Q:d0LzJxS") == 24);
    assert(T.sold(7, 16) == 15839562585774799994UL);
    assert(T.product(1) == "=EGQsl5m`?");
    assert(T.sold(43) == 866148853764147446UL);
    assert(T.products() == 47);
    assert(T.products() == 47);
    assert(T.products() == 47);
    assert(T.sold(34) == 5841499750651910825UL);
    assert(T.rank("bdx?7NUz2V") == 44);
    T.sell("v{TvDPw[@G", 47868124939637672UL);
    assert(T.sold(7, 39) == 4896329114629535062UL);
    assert(T.products() == 48);
    assert(T.rank("oF~|V:@7Vw") == 11);
    assert(T.product(40) == "g[Dh;R9G8S");
    assert(T.rank("LfDS:B33>Z") == 43);
    assert(T.sold(20) == 11999033969102932093UL);
    assert(T.product(36) == "Q>@1iAY]z6");
    assert(T.sold(27) == 8331970214356334611UL);
    assert(T.products() == 48);
    assert(T.sold(37) == 5297736914328143137UL);
    assert(T.rank("g[Dh;R9G8S") == 40);
    assert(T.rank("jdg6|Moo}f") == 37);
    assert(T.sold(23) == 11222151486746154052UL);
    assert(T.products() == 48);
    assert(T.products() == 48);
    assert(T.products() == 48);
    assert(T.rank("N1`g4U^2a|") == 28);
    assert(T.rank("[HPJB>]i}a") == 17);
    assert(T.sold(8) == 15642554824557391715UL);
    T.sell("TyXvltZrMd", 5184057162862028645UL);
    assert(T.rank("|tHw8m]n}]") == 16);
    assert(T.rank("`Rcmgc5iiu") == 15);
    assert(T.product(42) == "9FlsP=hivr");
    assert(T.product(43) == "P5wjvikM@M");
    assert(T.product(40) == "~7BOinxY8R");
    assert(T.sold(22) == 11236596770639729332UL);
    assert(T.products() == 49);
    assert(T.sold(30, 44) == 13438741798835614160UL);
    assert(T.sold(20, 33) == 13466341683698681946UL);
    
}

int main() {
    test1();
    test2();
    testRandom();

    std::cout << "All tests completed" << std::endl;
}
